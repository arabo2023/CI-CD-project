pipeline {
    agent any
    environment {
        SONAR_TOKEN = 'sqa_44bac6c8b095248814d694797ead9f1246e62321'
        SONARQUBE_URL = 'https://sonarqube.devopseasylearning.uk/'
    }
    stages {
        stage('Cloning Repo') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'a1djafar-github-token', 
                                               url: 'https://github.com/arabo2023/CI-CD-project.git']]])
            }
        }
        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'maven:3.8.1-jdk-11'
                    args '-v /root/.m2:/root/.m2' // Mount local Maven repository
                }
            }
            steps {
                sh 'mvn clean test'
            }
        }
        stage('SonarQube Analysis') {
            agent {
                docker {
                    image 'maven:3.8.1-jdk-11'
                    args '-v /root/.m2:/root/.m2' // Mount local Maven repository
                }
            }
            steps {
                withSonarQubeEnv('SonarQube') { // Ensure SonarQube server is configured in Jenkins
                    sh """
                    mvn sonar:sonar \
                        -Dsonar.projectKey=CI-CD-project \
                        -Dsonar.host.url=${SONARQUBE_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    """
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed'
        }
    }
}
