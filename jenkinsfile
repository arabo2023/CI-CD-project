pipeline {
    agent any
    environment {
        SONAR_TOKEN = credentials('sonarqube-auth-token') // Use Jenkins credentials plugin to inject the token
    }

    stages {
        stage('Check Docker Version') {
            steps {
                sh 'docker --version'
            }
        }
        stage('Cloning Repo') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], 
                          doGenerateSubmoduleConfigurations: false, 
                          extensions: [], 
                          submoduleCfg: [], 
                          userRemoteConfigs: [[credentialsId: 'a1djafar-github-token', 
                                               url: 'https://github.com/arabo2023/CI-CD-project.git']]])
            }
        }
        stage('Run Unit Tests') {
            agent {
                docker {
                    image 'maven:3.8.7-openjdk-18' // Use the specified Maven image
                    args '-v /root/.m2:/root/.m2' // Mount local Maven repository
                }
            }
            steps {
                sh 'mvn clean test'
            }
        }
        stage('SonarQube Analysis') {
            agent {
                docker {
                    image 'sonarsource/sonar-scanner-cli:11.0'
                }
            }
            environment {
                CI = 'true'
                scannerHome = '/opt/sonar-scanner'
                SONAR_SCANNER_CACHE = '/tmp/sonar-scanner-cache' // Use a different writable directory
            }
            steps {
                withSonarQubeEnv('Sonar') {
                    sh """
                    mkdir -p ${SONAR_SCANNER_CACHE}
                    ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=CI-CD-project \
                        -Dsonar.login=${SONAR_TOKEN} \
                        -Dsonar.cache.directory=${SONAR_SCANNER_CACHE} \
                        -X
                    """
                }
            }
        }
        stage('Hello') {
            steps {
                sh '''
                ls 
                pwd
                '''
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed'
        }
    }
}
